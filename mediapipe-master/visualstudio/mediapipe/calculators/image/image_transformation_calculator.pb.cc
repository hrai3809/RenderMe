// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/image/image_transformation_calculator.proto

#include "mediapipe/calculators/image/image_transformation_calculator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr RotationMode::RotationMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RotationModeDefaultTypeInternal {
  constexpr RotationModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RotationModeDefaultTypeInternal() {}
  union {
    RotationMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RotationModeDefaultTypeInternal _RotationMode_default_instance_;
constexpr ImageTransformationCalculatorOptions::ImageTransformationCalculatorOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : output_width_(0)
  , output_height_(0)
  , rotation_mode_(0)

  , flip_vertically_(false)
  , flip_horizontally_(false)
  , scale_mode_(0)

  , constant_padding_(true){}
struct ImageTransformationCalculatorOptionsDefaultTypeInternal {
  constexpr ImageTransformationCalculatorOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageTransformationCalculatorOptionsDefaultTypeInternal() {}
  union {
    ImageTransformationCalculatorOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageTransformationCalculatorOptionsDefaultTypeInternal _ImageTransformationCalculatorOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::RotationMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageTransformationCalculatorOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageTransformationCalculatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageTransformationCalculatorOptions, output_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageTransformationCalculatorOptions, output_height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageTransformationCalculatorOptions, rotation_mode_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageTransformationCalculatorOptions, flip_vertically_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageTransformationCalculatorOptions, flip_horizontally_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageTransformationCalculatorOptions, scale_mode_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageTransformationCalculatorOptions, constant_padding_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mediapipe::RotationMode)},
  { 5, 17, sizeof(::mediapipe::ImageTransformationCalculatorOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_RotationMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ImageTransformationCalculatorOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nAmediapipe/calculators/image/image_tran"
  "sformation_calculator.proto\022\tmediapipe\032$"
  "mediapipe/framework/calculator.proto\032\036me"
  "diapipe/gpu/scale_mode.proto\"h\n\014Rotation"
  "Mode\"X\n\004Mode\022\013\n\007UNKNOWN\020\000\022\016\n\nROTATION_0\020"
  "\001\022\017\n\013ROTATION_90\020\002\022\020\n\014ROTATION_180\020\003\022\020\n\014"
  "ROTATION_270\020\004\"\376\002\n$ImageTransformationCa"
  "lculatorOptions\022\027\n\014output_width\030\001 \001(\005:\0010"
  "\022\030\n\routput_height\030\002 \001(\005:\0010\0223\n\rrotation_m"
  "ode\030\003 \001(\0162\034.mediapipe.RotationMode.Mode\022"
  "\036\n\017flip_vertically\030\004 \001(\010:\005false\022 \n\021flip_"
  "horizontally\030\005 \001(\010:\005false\022-\n\nscale_mode\030"
  "\006 \001(\0162\031.mediapipe.ScaleMode.Mode\022\036\n\020cons"
  "tant_padding\030\007 \001(\010:\004true2]\n\003ext\022\034.mediap"
  "ipe.CalculatorOptions\030\276\375\221x \001(\0132/.mediapi"
  "pe.ImageTransformationCalculatorOptions"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto_deps[2] = {
  &::descriptor_table_mediapipe_2fframework_2fcalculator_2eproto,
  &::descriptor_table_mediapipe_2fgpu_2fscale_5fmode_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto = {
  false, false, 639, descriptor_table_protodef_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto, "mediapipe/calculators/image/image_transformation_calculator.proto", 
  &descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto_once, descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto::offsets,
  file_level_metadata_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto, file_level_enum_descriptors_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto, file_level_service_descriptors_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto_getter() {
  return &descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto(&descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RotationMode_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto);
  return file_level_enum_descriptors_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto[0];
}
bool RotationMode_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RotationMode_Mode RotationMode::UNKNOWN;
constexpr RotationMode_Mode RotationMode::ROTATION_0;
constexpr RotationMode_Mode RotationMode::ROTATION_90;
constexpr RotationMode_Mode RotationMode::ROTATION_180;
constexpr RotationMode_Mode RotationMode::ROTATION_270;
constexpr RotationMode_Mode RotationMode::Mode_MIN;
constexpr RotationMode_Mode RotationMode::Mode_MAX;
constexpr int RotationMode::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class RotationMode::_Internal {
 public:
};

RotationMode::RotationMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.RotationMode)
}
RotationMode::RotationMode(const RotationMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.RotationMode)
}

void RotationMode::SharedCtor() {
}

RotationMode::~RotationMode() {
  // @@protoc_insertion_point(destructor:mediapipe.RotationMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RotationMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RotationMode::ArenaDtor(void* object) {
  RotationMode* _this = reinterpret_cast< RotationMode* >(object);
  (void)_this;
}
void RotationMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RotationMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RotationMode::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.RotationMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RotationMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RotationMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.RotationMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.RotationMode)
  return target;
}

size_t RotationMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.RotationMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotationMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.RotationMode)
  GOOGLE_DCHECK_NE(&from, this);
  const RotationMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RotationMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.RotationMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.RotationMode)
    MergeFrom(*source);
  }
}

void RotationMode::MergeFrom(const RotationMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.RotationMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RotationMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.RotationMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotationMode::CopyFrom(const RotationMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.RotationMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotationMode::IsInitialized() const {
  return true;
}

void RotationMode::InternalSwap(RotationMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RotationMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto[0]);
}

// ===================================================================

class ImageTransformationCalculatorOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageTransformationCalculatorOptions>()._has_bits_);
  static void set_has_output_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_output_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rotation_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_flip_vertically(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flip_horizontally(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_scale_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_constant_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ImageTransformationCalculatorOptions::ImageTransformationCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ImageTransformationCalculatorOptions)
}
ImageTransformationCalculatorOptions::ImageTransformationCalculatorOptions(const ImageTransformationCalculatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&output_width_, &from.output_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&constant_padding_) -
    reinterpret_cast<char*>(&output_width_)) + sizeof(constant_padding_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ImageTransformationCalculatorOptions)
}

void ImageTransformationCalculatorOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&output_width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scale_mode_) -
    reinterpret_cast<char*>(&output_width_)) + sizeof(scale_mode_));
constant_padding_ = true;
}

ImageTransformationCalculatorOptions::~ImageTransformationCalculatorOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.ImageTransformationCalculatorOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageTransformationCalculatorOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ImageTransformationCalculatorOptions::ArenaDtor(void* object) {
  ImageTransformationCalculatorOptions* _this = reinterpret_cast< ImageTransformationCalculatorOptions* >(object);
  (void)_this;
}
void ImageTransformationCalculatorOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageTransformationCalculatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageTransformationCalculatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ImageTransformationCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&output_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scale_mode_) -
        reinterpret_cast<char*>(&output_width_)) + sizeof(scale_mode_));
    constant_padding_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageTransformationCalculatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 output_width = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_output_width(&has_bits);
          output_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 output_height = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_output_height(&has_bits);
          output_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.RotationMode.Mode rotation_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::RotationMode_Mode_IsValid(val))) {
            _internal_set_rotation_mode(static_cast<::mediapipe::RotationMode_Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool flip_vertically = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_flip_vertically(&has_bits);
          flip_vertically_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool flip_horizontally = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_flip_horizontally(&has_bits);
          flip_horizontally_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ScaleMode.Mode scale_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::ScaleMode_Mode_IsValid(val))) {
            _internal_set_scale_mode(static_cast<::mediapipe::ScaleMode_Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool constant_padding = 7 [default = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_constant_padding(&has_bits);
          constant_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageTransformationCalculatorOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ImageTransformationCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 output_width = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_output_width(), target);
  }

  // optional int32 output_height = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_output_height(), target);
  }

  // optional .mediapipe.RotationMode.Mode rotation_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_rotation_mode(), target);
  }

  // optional bool flip_vertically = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_flip_vertically(), target);
  }

  // optional bool flip_horizontally = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_flip_horizontally(), target);
  }

  // optional .mediapipe.ScaleMode.Mode scale_mode = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_scale_mode(), target);
  }

  // optional bool constant_padding = 7 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_constant_padding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ImageTransformationCalculatorOptions)
  return target;
}

size_t ImageTransformationCalculatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ImageTransformationCalculatorOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 output_width = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_output_width());
    }

    // optional int32 output_height = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_output_height());
    }

    // optional .mediapipe.RotationMode.Mode rotation_mode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rotation_mode());
    }

    // optional bool flip_vertically = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool flip_horizontally = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .mediapipe.ScaleMode.Mode scale_mode = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scale_mode());
    }

    // optional bool constant_padding = 7 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageTransformationCalculatorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ImageTransformationCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageTransformationCalculatorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageTransformationCalculatorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ImageTransformationCalculatorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ImageTransformationCalculatorOptions)
    MergeFrom(*source);
  }
}

void ImageTransformationCalculatorOptions::MergeFrom(const ImageTransformationCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ImageTransformationCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      output_width_ = from.output_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      output_height_ = from.output_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      rotation_mode_ = from.rotation_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      flip_vertically_ = from.flip_vertically_;
    }
    if (cached_has_bits & 0x00000010u) {
      flip_horizontally_ = from.flip_horizontally_;
    }
    if (cached_has_bits & 0x00000020u) {
      scale_mode_ = from.scale_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      constant_padding_ = from.constant_padding_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageTransformationCalculatorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ImageTransformationCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageTransformationCalculatorOptions::CopyFrom(const ImageTransformationCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ImageTransformationCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageTransformationCalculatorOptions::IsInitialized() const {
  return true;
}

void ImageTransformationCalculatorOptions::InternalSwap(ImageTransformationCalculatorOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageTransformationCalculatorOptions, scale_mode_)
      + sizeof(ImageTransformationCalculatorOptions::scale_mode_)
      - PROTOBUF_FIELD_OFFSET(ImageTransformationCalculatorOptions, output_width_)>(
          reinterpret_cast<char*>(&output_width_),
          reinterpret_cast<char*>(&other->output_width_));
  swap(constant_padding_, other->constant_padding_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageTransformationCalculatorOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2fimage_2fimage_5ftransformation_5fcalculator_2eproto[1]);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageTransformationCalculatorOptions::kExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::ImageTransformationCalculatorOptions >, 11, false >
  ImageTransformationCalculatorOptions::ext(kExtFieldNumber, ::mediapipe::ImageTransformationCalculatorOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::RotationMode* Arena::CreateMaybeMessage< ::mediapipe::RotationMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::RotationMode >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ImageTransformationCalculatorOptions* Arena::CreateMaybeMessage< ::mediapipe::ImageTransformationCalculatorOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ImageTransformationCalculatorOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
